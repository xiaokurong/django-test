django 学习笔记
1. 创建django项目
命令行下：
django-admin  startproject project_name

2. 运行django项目
命令行下：
python manage.py runserver 0.0.0.0:8000

3. django项目目录
|--project_name    ##项目目录
|   |-- __init__.py   ##空文件，python初始化文件
|   |-- setting.py    ##django项目的配置文件
|   |-- urls.py      ##路由配置文件
|   |-- usgi.py   ##usgi 接口入口
|--manage.py      ##配置管理工具

4. 创建app
命令行下：
django-admin startapp app_name

5. app目录
|--app_name    ##app目录
|   |-- __init__.py   ##空文件，python初始化文件
|   |-- admin.py    ##配置文件
|   |-- models.py      ##数据库配置文件
|   |-- tests.py   ## 
|   |-- views.py


6. 创建项目表结构
python manage.py migrate   # 创建项目表结构

python manage.py makemigrations app_name  # 让 Django 知道我们在我们的模型有一些变更

python manage.py migrate app_name   # 创建app表结构

python manage.py sqlmigrate blog 0001  ##查看创建表的sql语句

python manage.py flush  #清空数据库

7. django 数据库支持 
django 2.1 及以上版本不再支持mysql5.5及以下版本数据库。

8. django版本选择
Django 1.5.x 支持 Python 2.6.5 Python 2.7, Python 3.2 和 3.3.

Django 1.6.x 支持 Python 2.6.X, 2.7.X, 3.2.X 和 3.3.X

Django 1.7.x 支持 Python 2.7, 3.2, 3.3, 和 3.4 （注意：Python 2.6 不支持了）

Django 1.8.x 支持 Python 2.7, 3.2, 3.3, 3.4 和 3.5.  （长期支持版本 LTS)

Django 1.9.x 支持 Python 2.7, 3.4 和 3.5. 不支持 3.3 了

Django 1.10.x 支持 Python 2.7, 3.4 和 3.5. 

Django 1.11.x 支持 Python 2.7, 3.4, 3.5 和 3.6（长期支持版本 LTS) 最后一个支持 Python 2.7 的版本

Django 2.0.x 支持 Python 3.4, 3.5 和 3.6 （注意，不再支持 Python 2）

9. 创建超级管理员
python manage.py createsuperuser

修改用户密码
python manage.py changepasswod username


10. 导出数据和导入数据
python manage.py dumpdata appname > appname.json #导出
python manage.py loaddata appname.json  #导入

11. django shell 命令行
python manage.py shell    #类似python命令行，但是包含了django的库

12. 数据库命令行
python manage.py dbshell
引用app的models时，需要加入app的名字，例如

from app_name.models import polls

13. django模板标签

A.) spaceless spaceless标签：移除html标签中的空白字符。包括空格、tab键、换行等。示例代码如下：

{% spaceless %}
<p>
<a href="foo/">Foo</a>
</p>
{% endspaceless %}
那么在渲染完成后，会变成以下的代码：

<p><a href="foo/">Foo</a></p>
spaceless 只会移除html标签之间的空白字符。

B.)autoescape 
autoescape标签：开启和关闭这个标签内元素的自动转义功能。自动转义是可以将一些特殊的字符。比如 < 转义成 html 语法能识别的字符，会被转义成 &lt; ，而 > 会被自动转义成 &gt; 。模板中默认是已经开启了自动转义的。 autoescape 的示例代码如下：
# 传递的上下文信息context = {"info":"<a href=‘www.baidu.com‘>百度</a>"}
# 模板中关闭自动转义

{% autoescape off %}
　　{{ info }}
{% endautoescape %}
那么就会显示百度的一个超链接。如果把 off 改成 on ，那么就会显示成一个普通的字符串。示例代码如下：

{% autoescape on %}
{{ info }}
{% endautoescape %}


14. 查看django版本
A.) 在python shell中
	import django
	print (django.VERION)
	
B.) 在命令行下
	python -m django --version
	
15. 文件相互调用
	url		｛  .views  
	     	 |  django.config.path
			 |  django.
			 |

	views   ｛  django.http.httpresponse
			 |
			 
16. 静态文件引用
在项目setting文件中，添加app的静态文件路径，例如：
STATICFILES_DIRS = (
    os.path.join(HERE, 'static/'),
    os.path.join(HERE,'polls/static/'),
    os.path.join(HERE,'saltapi/static/'),
)

在app目录下建立相应的文件夹‘static',之后再建立app名字的文件夹，以便于跟其他app区别开来。上例为’saltapi‘，然后把相应的静态文件，如css文件，图片等放在此目录下，如果文件较多，也可分类放置在子文件夹下。
模板文件引用静态文件方法：
在模板的head中添加路径引用：
{% load static %}
<link rel="stylesheet" type="text/css" href="{% static 'saltapi/home.css' %}">

当多个css设置时，优先级如下：
内联样式）Inline style > （内部样式）Internal style sheet >（外部样式）External style sheet > 浏览器默认样式
注意：如果外部样式放在内部样式的后面，则外部样式将覆盖内部样式

17. models 字段定义
	1、models.AutoField　　自增列=int(11)
	　 如果没有的话，默认会生成一个名称为id的列，如果要显示的定义一个自增列，必须把该列设置为主键(primary_key=True)
	2、models.CharField　　字符串类型字段 必须加max_length参数
	3、models.BooleanField　布尔类型字段=tinyint(1)  不能为空，Blank=True
	4、models.ComaSeparatedIntegerField　　用逗号分割的数字类型=varchar 继承CharField，所以必须加max_lenght参数
	5、models.DateField　　日期字段类型date
	　 参数auto_now=True表示每次更新都会更新这个时间；参数auto_now_add表示只是第一次创建时添加，之后的更新不再改变
	6、models.DateTimeField　　日期字段类型datetime  同DateField的参数
	7、models.Decimal　　十进制小数类型=decimal
	　 必须指定整数位max_digits和小数位decimal_places
	8、models.EmailField　　字符串类型(正则表达式邮箱)=varchar  对字符串进行正则表达式验证
	9、models.FloatField　　浮点类型=double
	10、models.IntegerField　　整形
	11、models.BigIntegerField　长整形
	　　integer_field_ranges = {
	　　　　'SmallIntegerField': (-32768, 32767),
	　　　　'IntegerField': (-2147483648, 2147483647),
	　　　　'BigIntegerField': (-9223372036854775808, 9223372036854775807),
	　　　　'PositiveSmallIntegerField': (0, 32767),
	　　　　'PositiveIntegerField': (0, 2147483647),
	　　}
	12、models.IPAddressField　　字符串类型(ip4正则表达式)
	13、models.GenericIPAddressField　　字符串类型（ip4和ip6是可选的）
	　　参数protocol可以是：both、ipv4、ipv6  验证时，会根据设置进行报错
	14、models.NullBooleanField　　允许为空的布尔类型
	15、models.PositiveIntegerFiel　　正Integer
	16、models.PositiveSmallIntegerField　　正smallInteger
	17、models.SlugField　　减号、下划线、字母、数字
	18、models.SmallIntegerField　　数字
	　　数据库中的字段有：tinyint、smallint、int、bigint
	19、models.TextField　　字符串=longtext
	20、models.TimeField　　时间 HH:MM[:ss[.uuuuuu]]
	21、models.URLField　　字符串类型，地址正则表达式
	22、models.BinaryField　二进制
	23、models.ImageField   图片
	24、models.FilePathField 文件

18. 外键删除处理方式
1、常见的使用方式(设置为null)

class BookModel(models.Model):
    """
    书籍表
    """
    book_name = models.CharField(max_length=100, verbose_name='书名')
    # 表示外键关联到作者表,当作者表删除了该条数据,图书表中不删除,仅仅是把外键置空
    author = models.ForeignKey(AuthModel, null=True, blank=True, on_delete=models.SET_NULL)
    price = models.FloatField(verbose_name='价格')
    create_time = models.DateTimeField(auto_now_add=True, verbose_name='添加时间')

关于别的属性的介绍

CASCADE:这就是默认的选项，级联删除，你无需显性指定它。
PROTECT: 保护模式，如果采用该选项，删除的时候，会抛出ProtectedError错误。
SET_NULL: 置空模式，删除的时候，外键字段被设置为空，前提就是blank=True, null=True,定义该字段的时候，允许为空。
SET_DEFAULT: 置默认值，删除的时候，外键字段设置为默认值，所以定义外键的时候注意加上一个默认值。
SET(): 自定义一个值，该值当然只能是对应的实体了

19. 数据库基本操作
 d.django表数据的增删查改

  models.py中:

  class Person(models.Model):
    name = models.CharField(max_length=30)
    age = models.IntegerField()

 增加: models.Person.objects.create(name='zhouqiang',age=30)

 删除: models.Person.objects.filter(name='zhouqiang').delete()

 查找: models.Person.objects.all()

 修改: models.Person.objects.filter(name='zhouqiang').update(age=40)

20. 模板调用数据库信息
     {% for key in person_set %}
          {{ key.name }}
		  {{ key.age }}
      {% endfor %}
 
21. 模板调用视图中的变量名称，为字典的键而非值，注意。
例如：
views中定义
def test(request):
	render(request,'test.html',{'test1': test2 })
	
templete 定义：

{{ test }}

22. python 不支持多级字典赋值
例：
dict1={}
dict1['a']['b']='c'   ##提示key error，


